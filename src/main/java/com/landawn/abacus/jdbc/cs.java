/*
 * Copyright (c) 2024, Haiyang Li.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.landawn.abacus.jdbc;

/**
 * Constants container class providing standardized parameter and field names used throughout the Abacus JDBC framework.
 * 
 * <p>This utility class centralizes commonly used string literals to ensure consistency across the framework
 * and reduce the risk of typos in parameter names, SQL column names, and configuration keys.</p>
 * 
 * <p>The constants are primarily used in:</p>
 * <ul>
 *   <li>SQL parameter binding and named queries</li>
 *   <li>Method annotations and configuration</li>
 *   <li>Data access object implementations</li>
 *   <li>Result set processing and mapping</li>
 * </ul>
 * 
 * <p>Example usage:
 * <pre>{@code
 * // Using cs constants for parameter names
 * String sql = "SELECT * FROM users WHERE " + cs.columnName + " = ?";
 * query.setParameter(cs.entity, userEntity);
 * }</pre>
 * 
 * @since 1.0
 */
public final class cs { // NOSONAR
    /**
     * Private constructor to prevent instantiation of this utility class.
     */
    private cs() {
        // singleton
    }

    /**
     * Parameter name for ResultSet objects in query processing.
     */
    public static final String ResultSet = "ResultSet";
    /**
     * Parameter name for action callbacks and operations.
     */
    public static final String action = "action";
    /**
     * Parameter name for actions to be executed after method invocation.
     */
    public static final String afterInvokeAction = "afterInvokeAction";
    /**
     * Parameter name for extractors that retrieve auto-generated keys from insert operations.
     */
    public static final String autoGeneratedKeyExtractor = "autoGeneratedKeyExtractor";
    /**
     * Parameter name for collections of parameters used in batch operations.
     */
    public static final String batchParameters = "batchParameters";
    /**
     * Parameter name for the size of batches in batch processing operations.
     */
    public static final String batchSize = "batchSize";
    /**
     * Parameter name for actions to be executed before method invocation.
     */
    public static final String beforeInvokeAction = "beforeInvokeAction";
    /**
     * Parameter name for handlers responsible for resource cleanup and closing operations.
     */
    public static final String closeHandler = "closeHandler";
    /**
     * Parameter name for command objects or command specifications.
     */
    public static final String cmd = "cmd";
    /**
     * Parameter name for functions that extract values from database columns.
     */
    public static final String columnGetter = "columnGetter";
    /**
     * Parameter name for zero-based column index in result sets.
     */
    public static final String columnIndex = "columnIndex";
    /**
     * Parameter name for database column names.
     */
    public static final String columnName = "columnName";
    /**
     * Parameter name for condition objects used in query filtering.
     */
    public static final String cond = "cond";
    /**
     * Parameter name for database Connection objects.
     */
    public static final String conn = "conn";
    /**
     * Parameter name for Consumer functional interfaces that process single elements.
     */
    public static final String consumer = "consumer";
    /**
     * Parameter name for Consumer functional interfaces that process all elements in a collection.
     */
    public static final String consumerForAll = "consumerForAll";
    /**
     * Parameter name for count values or counting operations.
     */
    public static final String count = "count";
    /**
     * Parameter name for Data Access Object interface classes.
     */
    public static final String daoInterface = "daoInterface";
    /**
     * Parameter name for DataSource objects used to obtain database connections.
     */
    public static final String dataSource = "dataSource";
    /**
     * Parameter name for default column value extraction functions.
     */
    public static final String defaultColumnGetter = "defaultColumnGetter";
    /**
     * Parameter name for downstream collectors or operations in stream processing.
     */
    public static final String downstream = "downstream";
    /**
     * Parameter name for entity objects representing database records or domain models.
     */
    public static final String entity = "entity";
    /**
     * Parameter name for Class objects representing entity types.
     */
    public static final String entityClass = "entityClass";
    /**
     * Parameter name for Executor objects used for asynchronous task execution.
     */
    public static final String executor = "executor";
    /**
     * Parameter name for filter predicates used to test and exclude elements.
     */
    public static final String filter = "filter";
    /**
     * Parameter name for function objects or functional interfaces.
     */
    public static final String func = "func";
    /**
     * Parameter name for getter functions that extract values from objects.
     */
    public static final String getter = "getter";
    /**
     * Parameter name for handler objects that process events or manage operations.
     */
    public static final String handler = "handler";
    /**
     * Parameter name for Class objects representing handler types.
     */
    public static final String handlerClass = "handlerClass";
    /**
     * Parameter name for functions that extract unique identifier values from entities.
     */
    public static final String idExtractor = "idExtractor";
    /**
     * Parameter name for predicates that test whether an ID value is the default/unset value.
     */
    public static final String isDefaultIdTester = "isDefaultIdTester";
    /**
     * Parameter name for database transaction isolation level settings.
     */
    public static final String isolationLevel = "isolationLevel";
    /**
     * Parameter name for functions that extract key values for grouping or mapping operations.
     */
    public static final String keyExtractor = "keyExtractor";
    /**
     * Parameter name for binary functions that merge duplicate values in map operations.
     */
    public static final String mergeFunction = "mergeFunction";
    /**
     * Parameter name for suppliers that create multimap instances for collecting grouped values.
     */
    public static final String multimapSupplier = "multimapSupplier";
    /**
     * Parameter name for numeric values, typically representing count, limit, or size.
     */
    public static final String n = "n";
    /**
     * Parameter name for SQL queries that use named parameters instead of positional parameters.
     */
    public static final String namedSql = "namedSql";
    /**
     * Parameter name for offset values used in pagination and result limiting.
     */
    public static final String offset = "offset";
    /**
     * Parameter name for alternative actions to execute when the primary action cannot be performed.
     */
    public static final String orElseAction = "orElseAction";
    /**
     * Parameter name for collections of parameter names used in named SQL queries.
     */
    public static final String parameterNames = "parameterNames";
    /**
     * Parameter name for collections of parameter values used in SQL query execution.
     */
    public static final String parameters = "parameters";
    /**
     * Parameter name for functions that set multiple parameters on PreparedStatement objects.
     */
    public static final String parametersSetter = "parametersSetter";
    /**
     * Parameter name for functions that set parameters on PreparedStatement objects (short form).
     */
    public static final String paramsSetter = "paramsSetter";
    /**
     * Parameter name for collections of property names that should be refreshed after database operations.
     */
    public static final String propNamesToRefresh = "propNamesToRefresh";
    /**
     * Parameter name for qualifier strings used to distinguish or categorize objects.
     */
    public static final String qualifier = "qualifier";
    /**
     * Parameter name for registration operations or registry objects.
     */
    public static final String register = "register";
    /**
     * Parameter name for functions that extract results from ResultSet objects.
     */
    public static final String resultExtractor = "resultExtractor";
    /**
     * Parameter name for the first result extractor function in multi-extractor operations.
     */
    public static final String resultExtractor1 = "resultExtractor1";
    /**
     * Parameter name for the second result extractor function in multi-extractor operations.
     */
    public static final String resultExtractor2 = "resultExtractor2";
    /**
     * Parameter name for the third result extractor function in multi-extractor operations.
     */
    public static final String resultExtractor3 = "resultExtractor3";
    /**
     * Parameter name for ResultSet objects (lowercase variant of ResultSet constant).
     */
    public static final String resultSet = "resultSet"; // NOSONAR
    /**
     * Parameter name for arrays of column indexes to be returned from insert operations.
     */
    public static final String returnColumnIndexes = "returnColumnIndexes";
    /**
     * Parameter name for arrays of column names to be returned from insert operations.
     */
    public static final String returnColumnNames = "returnColumnNames";
    /**
     * Parameter name for consumer functions that process individual rows from result sets.
     */
    public static final String rowConsumer = "rowConsumer";
    /**
     * Parameter name for functions that extract complete row data from ResultSet objects.
     */
    public static final String rowExtractor = "rowExtractor";
    /**
     * Parameter name for predicates that filter rows during result set processing.
     */
    public static final String rowFilter = "rowFilter";
    /**
     * Parameter name for functions that map ResultSet rows to domain objects.
     */
    public static final String rowMapper = "rowMapper";
    /**
     * Parameter name for the first row mapper function in multi-mapper operations.
     */
    public static final String rowMapper1 = "rowMapper1";
    /**
     * Parameter name for the second row mapper function in multi-mapper operations.
     */
    public static final String rowMapper2 = "rowMapper2";
    /**
     * Parameter name for the third row mapper function in multi-mapper operations.
     */
    public static final String rowMapper3 = "rowMapper3";
    /**
     * Parameter name for SQL query strings.
     */
    public static final String sql = "sql";
    /**
     * Parameter name for action functions that operate on SQL query results.
     */
    public static final String sqlAction = "sqlAction";
    /**
     * Parameter name for the first SQL action function in multi-action operations.
     */
    public static final String sqlAction1 = "sqlAction1";
    /**
     * Parameter name for the second SQL action function in multi-action operations.
     */
    public static final String sqlAction2 = "sqlAction2";
    /**
     * Parameter name for the third SQL action function in multi-action operations.
     */
    public static final String sqlAction3 = "sqlAction3";
    /**
     * Parameter name for Statement or PreparedStatement objects.
     */
    public static final String stmt = "stmt";
    /**
     * Parameter name for functions that create Statement or PreparedStatement objects.
     */
    public static final String stmtCreator = "stmtCreator";
    /**
     * Parameter name for functions that configure Statement or PreparedStatement objects.
     */
    public static final String stmtSetter = "stmtSetter";
    /**
     * Parameter name for supplier functions that provide objects or values on demand.
     */
    public static final String supplier = "supplier";
    /**
     * Parameter name for Class objects representing target types for mapping or conversion operations.
     */
    public static final String targetClass = "targetClass";
    /**
     * Parameter name for Type objects representing target types for generic operations.
     */
    public static final String targetType = "targetType";
    /**
     * Parameter name for type specifications or Type objects.
     */
    public static final String type = "type";
    /**
     * Parameter name for collections of unique property names used in query construction.
     */
    public static final String uniquePropNamesForQuery = "uniquePropNamesForQuery";
    /**
     * Parameter name for URL strings, typically database connection URLs.
     */
    public static final String url = "url";
    /**
     * Parameter name for functions that extract values from objects or result sets.
     */
    public static final String valueExtractor = "valueExtractor";
}
